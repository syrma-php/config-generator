<?php

declare(strict_types=1);

namespace Syrma\ConfigGenerator\Generator\HeaderGenerator;

use function in_array;
use Syrma\ConfigGenerator\Exception\NotFoundException;
use Syrma\ConfigGenerator\Generator\GeneratorContext;

abstract class AbstractHeaderGenerator implements HeaderGeneratorInterface
{
    protected const TPL_AUTO_GENERATED_TEXT = 'This file has been auto-generated by the Syrma Config Generator.';
    protected const TPL_TECH_INFO_TEXT = 'TechInfo: definition: '.self::MARKER_DEFINITION.', environment: '.self::MARKER_ENV;
    protected const TPL_HASH = '--'.self::MARKER_HASH.'--';
    protected const TPL_END_HEADER = '--END-HEADER--';

    protected const MARKER_HASH = '{{hash}}';
    protected const MARKER_DEFINITION = '{{definition}}';
    protected const MARKER_ENV = '{{env}}';

    public function isSupported(GeneratorContext $context): bool
    {
        return in_array($context->getDefinition()->getType()->getValue(), $this->getSupportedTypes(), true);
    }

    public function generateHeader(string $configContent, GeneratorContext $context): string
    {
        return implode(PHP_EOL, [
            $this->wrapLine($this->generateAutoGeneratedText($context)),
            $this->wrapLine($this->generateTechInfoText($context)),
            $this->wrapLine($this->generateHashText($configContent, $context)),
            $this->wrapLine(self::TPL_END_HEADER),
            null,
        ]);
    }

    public function generateHash(string $configContent, GeneratorContext $context): string
    {
        return  base_convert(hash('sha256', $configContent), 16, 36);
    }

    public function isModified(string $oldConfigFileContent, GeneratorContext $context): bool
    {
        [,$oldContent] = explode($this->wrapLine(self::TPL_END_HEADER).PHP_EOL, $oldConfigFileContent, 2);

        $oldHash = $this->guessHash($oldConfigFileContent, $context);
        $newHash = $this->generateHash($oldContent, $context);

        return $oldHash !== $newHash;
    }

    protected function guessHash(string $configFileContent, GeneratorContext $context): string
    {
        $pattern = '/'.strtr(self::TPL_HASH, [self::MARKER_HASH => '(?P<hash>[a-zA-Z0-9]+)']).'/msi';

        if (false === preg_match($pattern, $configFileContent, $matches) || empty($matches['hash'])) {
            throw new NotFoundException(sprintf('Not found hash in config file : %s', $context->getEnvironment()->getOutputFile()));
        }

        return $matches['hash'];
    }

    /**
     * @return string[]
     */
    abstract protected function getSupportedTypes(): array;

    abstract protected function wrapLine(string $line): string;

    protected function generateHashText(string $configContent, GeneratorContext $context): string
    {
        return strtr(self::TPL_HASH, [self::MARKER_HASH => $this->generateHash($configContent, $context)]);
    }

    protected function generateAutoGeneratedText(GeneratorContext $context): string
    {
        return self::TPL_AUTO_GENERATED_TEXT;
    }

    protected function generateTechInfoText(GeneratorContext $context): string
    {
        return strtr(self::TPL_TECH_INFO_TEXT, [
            self::MARKER_ENV => $context->getEnvironment()->getName(),
            self::MARKER_DEFINITION => $context->getDefinition()->getId(),
        ]);
    }
}
